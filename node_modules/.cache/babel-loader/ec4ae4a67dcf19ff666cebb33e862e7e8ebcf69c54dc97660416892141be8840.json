{"ast":null,"code":"// Form validation and submission handling\nclass RegisterForm {\n  constructor() {\n    this.form = document.getElementById('registerForm');\n    this.submitBtn = document.getElementById('submitBtn');\n    this.spinner = document.getElementById('spinner');\n    this.buttonText = document.querySelector('.button-text');\n    this.init();\n  }\n  init() {\n    // Add event listeners\n    this.form.addEventListener('submit', e => this.handleSubmit(e));\n\n    // Add real-time validation\n    this.addRealTimeValidation();\n\n    // Auto-resize for mobile\n    this.adjustForMobile();\n    window.addEventListener('resize', () => this.adjustForMobile());\n  }\n  addRealTimeValidation() {\n    const fields = this.form.querySelectorAll('input, select');\n    fields.forEach(field => {\n      field.addEventListener('blur', () => this.validateField(field));\n      field.addEventListener('input', () => this.clearError(field));\n    });\n\n    // Special handling for password confirmation\n    const confirmPassword = document.getElementById('confirm_password');\n    const password = document.getElementById('password');\n    confirmPassword.addEventListener('input', () => {\n      if (confirmPassword.value && password.value) {\n        this.validatePasswordMatch();\n      }\n    });\n    password.addEventListener('input', () => {\n      if (confirmPassword.value && password.value) {\n        this.validatePasswordMatch();\n      }\n    });\n  }\n  validateField(field) {\n    const value = field.value.trim();\n    const fieldName = field.name;\n    let isValid = true;\n    let errorMessage = '';\n\n    // Required field validation\n    if (!value && field.required) {\n      errorMessage = `${this.getFieldLabel(fieldName)} is required`;\n      isValid = false;\n    } else if (value) {\n      // Specific field validations\n      switch (fieldName) {\n        case 'email':\n          if (!this.isValidEmail(value)) {\n            errorMessage = 'Please enter a valid email address';\n            isValid = false;\n          }\n          break;\n        case 'nic':\n          if (!this.isValidNIC(value)) {\n            errorMessage = 'Please enter a valid NIC number';\n            isValid = false;\n          }\n          break;\n        case 'phi_id':\n          if (!this.isValidPHIID(value)) {\n            errorMessage = 'Please enter a valid PHI ID';\n            isValid = false;\n          }\n          break;\n        case 'password':\n          if (!this.isValidPassword(value)) {\n            errorMessage = 'Password must be at least 8 characters with uppercase, lowercase, and number';\n            isValid = false;\n          }\n          break;\n      }\n    }\n    this.showError(field, errorMessage, !isValid);\n    return isValid;\n  }\n  validatePasswordMatch() {\n    const password = document.getElementById('password').value;\n    const confirmPassword = document.getElementById('confirm_password').value;\n    if (password !== confirmPassword) {\n      this.showError(document.getElementById('confirm_password'), 'Passwords do not match', true);\n      return false;\n    } else {\n      this.showError(document.getElementById('confirm_password'), '', false);\n      return true;\n    }\n  }\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  isValidNIC(nic) {\n    // Sri Lankan NIC validation (old format: 123456789V, new format: 123456789012)\n    const oldNICRegex = /^[0-9]{9}[vVxX]$/;\n    const newNICRegex = /^[0-9]{12}$/;\n    return oldNICRegex.test(nic) || newNICRegex.test(nic);\n  }\n  isValidPHIID(phiId) {\n    // Basic PHI ID validation (adjust as needed)\n    const phiIdRegex = /^PHI[0-9]{4,6}$/i;\n    return phiIdRegex.test(phiId) || /^[0-9]{4,6}$/.test(phiId);\n  }\n  isValidPassword(password) {\n    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\n    return passwordRegex.test(password);\n  }\n  showError(field, message, hasError) {\n    const errorElement = document.getElementById(field.name + 'Error');\n    if (errorElement) {\n      errorElement.textContent = message;\n    }\n    if (hasError) {\n      field.classList.add('error');\n    } else {\n      field.classList.remove('error');\n    }\n  }\n  clearError(field) {\n    field.classList.remove('error');\n    const errorElement = document.getElementById(field.name + 'Error');\n    if (errorElement && field.value.trim()) {\n      errorElement.textContent = '';\n    }\n  }\n  getFieldLabel(fieldName) {\n    const labels = {\n      'name': 'Name',\n      'phi_id': 'PHI ID',\n      'nic': 'NIC',\n      'address': 'Personal Address',\n      'email': 'Email',\n      'office_location': 'Office Location',\n      'district': 'District',\n      'grama_niladhari': 'Grama Niladhari Divisions',\n      'password': 'Password',\n      'confirm_password': 'Confirm Password'\n    };\n    return labels[fieldName] || fieldName;\n  }\n  validateAllFields() {\n    const fields = this.form.querySelectorAll('input[required], select[required]');\n    let isValid = true;\n    fields.forEach(field => {\n      if (!this.validateField(field)) {\n        isValid = false;\n      }\n    });\n\n    // Validate password match\n    if (!this.validatePasswordMatch()) {\n      isValid = false;\n    }\n    return isValid;\n  }\n  setLoading(isLoading) {\n    if (isLoading) {\n      this.submitBtn.disabled = true;\n      this.submitBtn.classList.add('loading');\n      this.buttonText.style.display = 'none';\n      this.spinner.style.display = 'block';\n    } else {\n      this.submitBtn.disabled = false;\n      this.submitBtn.classList.remove('loading');\n      this.buttonText.style.display = 'block';\n      this.spinner.style.display = 'none';\n    }\n  }\n  async handleSubmit(e) {\n    e.preventDefault();\n\n    // Validate all fields\n    if (!this.validateAllFields()) {\n      this.showNotification('Please fix the errors below', 'error');\n      return;\n    }\n\n    // Get form data\n    const formData = new FormData(this.form);\n    const data = Object.fromEntries(formData);\n\n    // Remove confirm password from data\n    delete data.confirm_password;\n    try {\n      this.setLoading(true);\n\n      // Simulate API call (replace with actual API endpoint)\n      await this.submitRegistration(data);\n      this.showNotification('Registration successful!', 'success');\n\n      // Redirect after successful registration\n      setTimeout(() => {\n        // Replace with actual redirect logic\n        console.log('Redirecting to login page...');\n        // window.location.href = '/login';\n      }, 2000);\n    } catch (error) {\n      console.error('Registration error:', error);\n      this.showNotification('Registration failed. Please try again.', 'error');\n    } finally {\n      this.setLoading(false);\n    }\n  }\n  async submitRegistration(data) {\n    // Simulate API call\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Registration data:', data);\n\n        // Simulate random success/failure for demo\n        if (Math.random() > 0.1) {\n          resolve({\n            success: true,\n            message: 'Registration successful'\n          });\n        } else {\n          reject(new Error('Registration failed'));\n        }\n      }, 2000);\n    });\n  }\n  showNotification(message, type = 'info') {\n    // Remove existing notifications\n    const existingNotifications = document.querySelectorAll('.notification');\n    existingNotifications.forEach(notification => notification.remove());\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification ${type}`;\n    notification.textContent = message;\n\n    // Add styles\n    notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 12px 20px;\n            border-radius: 8px;\n            color: white;\n            font-weight: 500;\n            z-index: 1000;\n            animation: slideIn 0.3s ease-out;\n            max-width: 300px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        `;\n    if (type === 'success') {\n      notification.style.backgroundColor = '#10b981';\n    } else if (type === 'error') {\n      notification.style.backgroundColor = '#ef4444';\n    } else {\n      notification.style.backgroundColor = '#3b82f6';\n    }\n    document.body.appendChild(notification);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      notification.style.animation = 'slideOut 0.3s ease-out forwards';\n      setTimeout(() => notification.remove(), 300);\n    }, 5000);\n  }\n  adjustForMobile() {\n    if (window.innerWidth <= 480) {\n      document.querySelectorAll('input, select').forEach(input => {\n        input.style.fontSize = '16px'; // Prevents zoom on iOS\n      });\n    }\n  }\n}\n\n// Password toggle functionality\nfunction togglePassword(fieldId) {\n  const field = document.getElementById(fieldId);\n  const button = field.nextElementSibling;\n  if (field.type === 'password') {\n    field.type = 'text';\n    button.textContent = '🙈';\n  } else {\n    field.type = 'password';\n    button.textContent = '👁';\n  }\n}\n\n// Back button functionality\nfunction goBack() {\n  if (window.history.length > 1) {\n    window.history.back();\n  } else {\n    // Fallback if no history\n    window.location.href = '/'; // Adjust as needed\n  }\n}\n\n// Add CSS animations\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes slideIn {\n        from {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes slideOut {\n        from {\n            transform: translateX(0);\n            opacity: 1;\n        }\n        to {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n    }\n`;\ndocument.head.appendChild(style);\n\n// Initialize the form when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new RegisterForm();\n});\n\n// Export for module use (if needed)\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = RegisterForm;\n}","map":{"version":3,"names":["RegisterForm","constructor","form","document","getElementById","submitBtn","spinner","buttonText","querySelector","init","addEventListener","e","handleSubmit","addRealTimeValidation","adjustForMobile","window","fields","querySelectorAll","forEach","field","validateField","clearError","confirmPassword","password","value","validatePasswordMatch","trim","fieldName","name","isValid","errorMessage","required","getFieldLabel","isValidEmail","isValidNIC","isValidPHIID","isValidPassword","showError","email","emailRegex","test","nic","oldNICRegex","newNICRegex","phiId","phiIdRegex","passwordRegex","message","hasError","errorElement","textContent","classList","add","remove","labels","validateAllFields","setLoading","isLoading","disabled","style","display","preventDefault","showNotification","formData","FormData","data","Object","fromEntries","confirm_password","submitRegistration","setTimeout","console","log","error","Promise","resolve","reject","Math","random","success","Error","type","existingNotifications","notification","createElement","className","cssText","backgroundColor","body","appendChild","animation","innerWidth","input","fontSize","togglePassword","fieldId","button","nextElementSibling","goBack","history","length","back","location","href","head","module","exports"],"sources":["C:/Users/induwara/safe-track/src/pages/RegisterForm.js"],"sourcesContent":["// Form validation and submission handling\r\nclass RegisterForm {\r\n    constructor() {\r\n        this.form = document.getElementById('registerForm');\r\n        this.submitBtn = document.getElementById('submitBtn');\r\n        this.spinner = document.getElementById('spinner');\r\n        this.buttonText = document.querySelector('.button-text');\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        // Add event listeners\r\n        this.form.addEventListener('submit', (e) => this.handleSubmit(e));\r\n        \r\n        // Add real-time validation\r\n        this.addRealTimeValidation();\r\n        \r\n        // Auto-resize for mobile\r\n        this.adjustForMobile();\r\n        window.addEventListener('resize', () => this.adjustForMobile());\r\n    }\r\n\r\n    addRealTimeValidation() {\r\n        const fields = this.form.querySelectorAll('input, select');\r\n        \r\n        fields.forEach(field => {\r\n            field.addEventListener('blur', () => this.validateField(field));\r\n            field.addEventListener('input', () => this.clearError(field));\r\n        });\r\n\r\n        // Special handling for password confirmation\r\n        const confirmPassword = document.getElementById('confirm_password');\r\n        const password = document.getElementById('password');\r\n        \r\n        confirmPassword.addEventListener('input', () => {\r\n            if (confirmPassword.value && password.value) {\r\n                this.validatePasswordMatch();\r\n            }\r\n        });\r\n        \r\n        password.addEventListener('input', () => {\r\n            if (confirmPassword.value && password.value) {\r\n                this.validatePasswordMatch();\r\n            }\r\n        });\r\n    }\r\n\r\n    validateField(field) {\r\n        const value = field.value.trim();\r\n        const fieldName = field.name;\r\n        let isValid = true;\r\n        let errorMessage = '';\r\n\r\n        // Required field validation\r\n        if (!value && field.required) {\r\n            errorMessage = `${this.getFieldLabel(fieldName)} is required`;\r\n            isValid = false;\r\n        } else if (value) {\r\n            // Specific field validations\r\n            switch (fieldName) {\r\n                case 'email':\r\n                    if (!this.isValidEmail(value)) {\r\n                        errorMessage = 'Please enter a valid email address';\r\n                        isValid = false;\r\n                    }\r\n                    break;\r\n                case 'nic':\r\n                    if (!this.isValidNIC(value)) {\r\n                        errorMessage = 'Please enter a valid NIC number';\r\n                        isValid = false;\r\n                    }\r\n                    break;\r\n                case 'phi_id':\r\n                    if (!this.isValidPHIID(value)) {\r\n                        errorMessage = 'Please enter a valid PHI ID';\r\n                        isValid = false;\r\n                    }\r\n                    break;\r\n                case 'password':\r\n                    if (!this.isValidPassword(value)) {\r\n                        errorMessage = 'Password must be at least 8 characters with uppercase, lowercase, and number';\r\n                        isValid = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.showError(field, errorMessage, !isValid);\r\n        return isValid;\r\n    }\r\n\r\n    validatePasswordMatch() {\r\n        const password = document.getElementById('password').value;\r\n        const confirmPassword = document.getElementById('confirm_password').value;\r\n        \r\n        if (password !== confirmPassword) {\r\n            this.showError(document.getElementById('confirm_password'), 'Passwords do not match', true);\r\n            return false;\r\n        } else {\r\n            this.showError(document.getElementById('confirm_password'), '', false);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isValidEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(email);\r\n    }\r\n\r\n    isValidNIC(nic) {\r\n        // Sri Lankan NIC validation (old format: 123456789V, new format: 123456789012)\r\n        const oldNICRegex = /^[0-9]{9}[vVxX]$/;\r\n        const newNICRegex = /^[0-9]{12}$/;\r\n        return oldNICRegex.test(nic) || newNICRegex.test(nic);\r\n    }\r\n\r\n    isValidPHIID(phiId) {\r\n        // Basic PHI ID validation (adjust as needed)\r\n        const phiIdRegex = /^PHI[0-9]{4,6}$/i;\r\n        return phiIdRegex.test(phiId) || /^[0-9]{4,6}$/.test(phiId);\r\n    }\r\n\r\n    isValidPassword(password) {\r\n        // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\r\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\r\n        return passwordRegex.test(password);\r\n    }\r\n\r\n    showError(field, message, hasError) {\r\n        const errorElement = document.getElementById(field.name + 'Error');\r\n        \r\n        if (errorElement) {\r\n            errorElement.textContent = message;\r\n        }\r\n        \r\n        if (hasError) {\r\n            field.classList.add('error');\r\n        } else {\r\n            field.classList.remove('error');\r\n        }\r\n    }\r\n\r\n    clearError(field) {\r\n        field.classList.remove('error');\r\n        const errorElement = document.getElementById(field.name + 'Error');\r\n        if (errorElement && field.value.trim()) {\r\n            errorElement.textContent = '';\r\n        }\r\n    }\r\n\r\n    getFieldLabel(fieldName) {\r\n        const labels = {\r\n            'name': 'Name',\r\n            'phi_id': 'PHI ID',\r\n            'nic': 'NIC',\r\n            'address': 'Personal Address',\r\n            'email': 'Email',\r\n            'office_location': 'Office Location',\r\n            'district': 'District',\r\n            'grama_niladhari': 'Grama Niladhari Divisions',\r\n            'password': 'Password',\r\n            'confirm_password': 'Confirm Password'\r\n        };\r\n        return labels[fieldName] || fieldName;\r\n    }\r\n\r\n    validateAllFields() {\r\n        const fields = this.form.querySelectorAll('input[required], select[required]');\r\n        let isValid = true;\r\n\r\n        fields.forEach(field => {\r\n            if (!this.validateField(field)) {\r\n                isValid = false;\r\n            }\r\n        });\r\n\r\n        // Validate password match\r\n        if (!this.validatePasswordMatch()) {\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    setLoading(isLoading) {\r\n        if (isLoading) {\r\n            this.submitBtn.disabled = true;\r\n            this.submitBtn.classList.add('loading');\r\n            this.buttonText.style.display = 'none';\r\n            this.spinner.style.display = 'block';\r\n        } else {\r\n            this.submitBtn.disabled = false;\r\n            this.submitBtn.classList.remove('loading');\r\n            this.buttonText.style.display = 'block';\r\n            this.spinner.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        // Validate all fields\r\n        if (!this.validateAllFields()) {\r\n            this.showNotification('Please fix the errors below', 'error');\r\n            return;\r\n        }\r\n\r\n        // Get form data\r\n        const formData = new FormData(this.form);\r\n        const data = Object.fromEntries(formData);\r\n        \r\n        // Remove confirm password from data\r\n        delete data.confirm_password;\r\n\r\n        try {\r\n            this.setLoading(true);\r\n            \r\n            // Simulate API call (replace with actual API endpoint)\r\n            await this.submitRegistration(data);\r\n            \r\n            this.showNotification('Registration successful!', 'success');\r\n            \r\n            // Redirect after successful registration\r\n            setTimeout(() => {\r\n                // Replace with actual redirect logic\r\n                console.log('Redirecting to login page...');\r\n                // window.location.href = '/login';\r\n            }, 2000);\r\n            \r\n        } catch (error) {\r\n            console.error('Registration error:', error);\r\n            this.showNotification('Registration failed. Please try again.', 'error');\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    async submitRegistration(data) {\r\n        // Simulate API call\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                console.log('Registration data:', data);\r\n                \r\n                // Simulate random success/failure for demo\r\n                if (Math.random() > 0.1) {\r\n                    resolve({ success: true, message: 'Registration successful' });\r\n                } else {\r\n                    reject(new Error('Registration failed'));\r\n                }\r\n            }, 2000);\r\n        });\r\n    }\r\n\r\n    showNotification(message, type = 'info') {\r\n        // Remove existing notifications\r\n        const existingNotifications = document.querySelectorAll('.notification');\r\n        existingNotifications.forEach(notification => notification.remove());\r\n\r\n        // Create notification element\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification ${type}`;\r\n        notification.textContent = message;\r\n        \r\n        // Add styles\r\n        notification.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            padding: 12px 20px;\r\n            border-radius: 8px;\r\n            color: white;\r\n            font-weight: 500;\r\n            z-index: 1000;\r\n            animation: slideIn 0.3s ease-out;\r\n            max-width: 300px;\r\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n        `;\r\n\r\n        if (type === 'success') {\r\n            notification.style.backgroundColor = '#10b981';\r\n        } else if (type === 'error') {\r\n            notification.style.backgroundColor = '#ef4444';\r\n        } else {\r\n            notification.style.backgroundColor = '#3b82f6';\r\n        }\r\n\r\n        document.body.appendChild(notification);\r\n\r\n        // Auto remove after 5 seconds\r\n        setTimeout(() => {\r\n            notification.style.animation = 'slideOut 0.3s ease-out forwards';\r\n            setTimeout(() => notification.remove(), 300);\r\n        }, 5000);\r\n    }\r\n\r\n    adjustForMobile() {\r\n        if (window.innerWidth <= 480) {\r\n            document.querySelectorAll('input, select').forEach(input => {\r\n                input.style.fontSize = '16px'; // Prevents zoom on iOS\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Password toggle functionality\r\nfunction togglePassword(fieldId) {\r\n    const field = document.getElementById(fieldId);\r\n    const button = field.nextElementSibling;\r\n    \r\n    if (field.type === 'password') {\r\n        field.type = 'text';\r\n        button.textContent = '🙈';\r\n    } else {\r\n        field.type = 'password';\r\n        button.textContent = '👁';\r\n    }\r\n}\r\n\r\n// Back button functionality\r\nfunction goBack() {\r\n    if (window.history.length > 1) {\r\n        window.history.back();\r\n    } else {\r\n        // Fallback if no history\r\n        window.location.href = '/'; // Adjust as needed\r\n    }\r\n}\r\n\r\n// Add CSS animations\r\nconst style = document.createElement('style');\r\nstyle.textContent = `\r\n    @keyframes slideIn {\r\n        from {\r\n            transform: translateX(100%);\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n        }\r\n    }\r\n    \r\n    @keyframes slideOut {\r\n        from {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n        }\r\n        to {\r\n            transform: translateX(100%);\r\n            opacity: 0;\r\n        }\r\n    }\r\n`;\r\ndocument.head.appendChild(style);\r\n\r\n// Initialize the form when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new RegisterForm();\r\n});\r\n\r\n// Export for module use (if needed)\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = RegisterForm;\r\n}"],"mappings":"AAAA;AACA,MAAMA,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;IACnD,IAAI,CAACC,SAAS,GAAGF,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACrD,IAAI,CAACE,OAAO,GAAGH,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;IACjD,IAAI,CAACG,UAAU,GAAGJ,QAAQ,CAACK,aAAa,CAAC,cAAc,CAAC;IAExD,IAAI,CAACC,IAAI,CAAC,CAAC;EACf;EAEAA,IAAIA,CAAA,EAAG;IACH;IACA,IAAI,CAACP,IAAI,CAACQ,gBAAgB,CAAC,QAAQ,EAAGC,CAAC,IAAK,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC;;IAEjE;IACA,IAAI,CAACE,qBAAqB,CAAC,CAAC;;IAE5B;IACA,IAAI,CAACC,eAAe,CAAC,CAAC;IACtBC,MAAM,CAACL,gBAAgB,CAAC,QAAQ,EAAE,MAAM,IAAI,CAACI,eAAe,CAAC,CAAC,CAAC;EACnE;EAEAD,qBAAqBA,CAAA,EAAG;IACpB,MAAMG,MAAM,GAAG,IAAI,CAACd,IAAI,CAACe,gBAAgB,CAAC,eAAe,CAAC;IAE1DD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAI;MACpBA,KAAK,CAACT,gBAAgB,CAAC,MAAM,EAAE,MAAM,IAAI,CAACU,aAAa,CAACD,KAAK,CAAC,CAAC;MAC/DA,KAAK,CAACT,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACW,UAAU,CAACF,KAAK,CAAC,CAAC;IACjE,CAAC,CAAC;;IAEF;IACA,MAAMG,eAAe,GAAGnB,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;IACnE,MAAMmB,QAAQ,GAAGpB,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;IAEpDkB,eAAe,CAACZ,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAC5C,IAAIY,eAAe,CAACE,KAAK,IAAID,QAAQ,CAACC,KAAK,EAAE;QACzC,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC;IAEFF,QAAQ,CAACb,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACrC,IAAIY,eAAe,CAACE,KAAK,IAAID,QAAQ,CAACC,KAAK,EAAE;QACzC,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC;EACN;EAEAL,aAAaA,CAACD,KAAK,EAAE;IACjB,MAAMK,KAAK,GAAGL,KAAK,CAACK,KAAK,CAACE,IAAI,CAAC,CAAC;IAChC,MAAMC,SAAS,GAAGR,KAAK,CAACS,IAAI;IAC5B,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIC,YAAY,GAAG,EAAE;;IAErB;IACA,IAAI,CAACN,KAAK,IAAIL,KAAK,CAACY,QAAQ,EAAE;MAC1BD,YAAY,GAAG,GAAG,IAAI,CAACE,aAAa,CAACL,SAAS,CAAC,cAAc;MAC7DE,OAAO,GAAG,KAAK;IACnB,CAAC,MAAM,IAAIL,KAAK,EAAE;MACd;MACA,QAAQG,SAAS;QACb,KAAK,OAAO;UACR,IAAI,CAAC,IAAI,CAACM,YAAY,CAACT,KAAK,CAAC,EAAE;YAC3BM,YAAY,GAAG,oCAAoC;YACnDD,OAAO,GAAG,KAAK;UACnB;UACA;QACJ,KAAK,KAAK;UACN,IAAI,CAAC,IAAI,CAACK,UAAU,CAACV,KAAK,CAAC,EAAE;YACzBM,YAAY,GAAG,iCAAiC;YAChDD,OAAO,GAAG,KAAK;UACnB;UACA;QACJ,KAAK,QAAQ;UACT,IAAI,CAAC,IAAI,CAACM,YAAY,CAACX,KAAK,CAAC,EAAE;YAC3BM,YAAY,GAAG,6BAA6B;YAC5CD,OAAO,GAAG,KAAK;UACnB;UACA;QACJ,KAAK,UAAU;UACX,IAAI,CAAC,IAAI,CAACO,eAAe,CAACZ,KAAK,CAAC,EAAE;YAC9BM,YAAY,GAAG,8EAA8E;YAC7FD,OAAO,GAAG,KAAK;UACnB;UACA;MACR;IACJ;IAEA,IAAI,CAACQ,SAAS,CAAClB,KAAK,EAAEW,YAAY,EAAE,CAACD,OAAO,CAAC;IAC7C,OAAOA,OAAO;EAClB;EAEAJ,qBAAqBA,CAAA,EAAG;IACpB,MAAMF,QAAQ,GAAGpB,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACoB,KAAK;IAC1D,MAAMF,eAAe,GAAGnB,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACoB,KAAK;IAEzE,IAAID,QAAQ,KAAKD,eAAe,EAAE;MAC9B,IAAI,CAACe,SAAS,CAAClC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,EAAE,wBAAwB,EAAE,IAAI,CAAC;MAC3F,OAAO,KAAK;IAChB,CAAC,MAAM;MACH,IAAI,CAACiC,SAAS,CAAClC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC;MACtE,OAAO,IAAI;IACf;EACJ;EAEA6B,YAAYA,CAACK,KAAK,EAAE;IAChB,MAAMC,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;EACjC;EAEAJ,UAAUA,CAACO,GAAG,EAAE;IACZ;IACA,MAAMC,WAAW,GAAG,kBAAkB;IACtC,MAAMC,WAAW,GAAG,aAAa;IACjC,OAAOD,WAAW,CAACF,IAAI,CAACC,GAAG,CAAC,IAAIE,WAAW,CAACH,IAAI,CAACC,GAAG,CAAC;EACzD;EAEAN,YAAYA,CAACS,KAAK,EAAE;IAChB;IACA,MAAMC,UAAU,GAAG,kBAAkB;IACrC,OAAOA,UAAU,CAACL,IAAI,CAACI,KAAK,CAAC,IAAI,cAAc,CAACJ,IAAI,CAACI,KAAK,CAAC;EAC/D;EAEAR,eAAeA,CAACb,QAAQ,EAAE;IACtB;IACA,MAAMuB,aAAa,GAAG,uDAAuD;IAC7E,OAAOA,aAAa,CAACN,IAAI,CAACjB,QAAQ,CAAC;EACvC;EAEAc,SAASA,CAAClB,KAAK,EAAE4B,OAAO,EAAEC,QAAQ,EAAE;IAChC,MAAMC,YAAY,GAAG9C,QAAQ,CAACC,cAAc,CAACe,KAAK,CAACS,IAAI,GAAG,OAAO,CAAC;IAElE,IAAIqB,YAAY,EAAE;MACdA,YAAY,CAACC,WAAW,GAAGH,OAAO;IACtC;IAEA,IAAIC,QAAQ,EAAE;MACV7B,KAAK,CAACgC,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;IAChC,CAAC,MAAM;MACHjC,KAAK,CAACgC,SAAS,CAACE,MAAM,CAAC,OAAO,CAAC;IACnC;EACJ;EAEAhC,UAAUA,CAACF,KAAK,EAAE;IACdA,KAAK,CAACgC,SAAS,CAACE,MAAM,CAAC,OAAO,CAAC;IAC/B,MAAMJ,YAAY,GAAG9C,QAAQ,CAACC,cAAc,CAACe,KAAK,CAACS,IAAI,GAAG,OAAO,CAAC;IAClE,IAAIqB,YAAY,IAAI9B,KAAK,CAACK,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE;MACpCuB,YAAY,CAACC,WAAW,GAAG,EAAE;IACjC;EACJ;EAEAlB,aAAaA,CAACL,SAAS,EAAE;IACrB,MAAM2B,MAAM,GAAG;MACX,MAAM,EAAE,MAAM;MACd,QAAQ,EAAE,QAAQ;MAClB,KAAK,EAAE,KAAK;MACZ,SAAS,EAAE,kBAAkB;MAC7B,OAAO,EAAE,OAAO;MAChB,iBAAiB,EAAE,iBAAiB;MACpC,UAAU,EAAE,UAAU;MACtB,iBAAiB,EAAE,2BAA2B;MAC9C,UAAU,EAAE,UAAU;MACtB,kBAAkB,EAAE;IACxB,CAAC;IACD,OAAOA,MAAM,CAAC3B,SAAS,CAAC,IAAIA,SAAS;EACzC;EAEA4B,iBAAiBA,CAAA,EAAG;IAChB,MAAMvC,MAAM,GAAG,IAAI,CAACd,IAAI,CAACe,gBAAgB,CAAC,mCAAmC,CAAC;IAC9E,IAAIY,OAAO,GAAG,IAAI;IAElBb,MAAM,CAACE,OAAO,CAACC,KAAK,IAAI;MACpB,IAAI,CAAC,IAAI,CAACC,aAAa,CAACD,KAAK,CAAC,EAAE;QAC5BU,OAAO,GAAG,KAAK;MACnB;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC,IAAI,CAACJ,qBAAqB,CAAC,CAAC,EAAE;MAC/BI,OAAO,GAAG,KAAK;IACnB;IAEA,OAAOA,OAAO;EAClB;EAEA2B,UAAUA,CAACC,SAAS,EAAE;IAClB,IAAIA,SAAS,EAAE;MACX,IAAI,CAACpD,SAAS,CAACqD,QAAQ,GAAG,IAAI;MAC9B,IAAI,CAACrD,SAAS,CAAC8C,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;MACvC,IAAI,CAAC7C,UAAU,CAACoD,KAAK,CAACC,OAAO,GAAG,MAAM;MACtC,IAAI,CAACtD,OAAO,CAACqD,KAAK,CAACC,OAAO,GAAG,OAAO;IACxC,CAAC,MAAM;MACH,IAAI,CAACvD,SAAS,CAACqD,QAAQ,GAAG,KAAK;MAC/B,IAAI,CAACrD,SAAS,CAAC8C,SAAS,CAACE,MAAM,CAAC,SAAS,CAAC;MAC1C,IAAI,CAAC9C,UAAU,CAACoD,KAAK,CAACC,OAAO,GAAG,OAAO;MACvC,IAAI,CAACtD,OAAO,CAACqD,KAAK,CAACC,OAAO,GAAG,MAAM;IACvC;EACJ;EAEA,MAAMhD,YAAYA,CAACD,CAAC,EAAE;IAClBA,CAAC,CAACkD,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI,CAAC,IAAI,CAACN,iBAAiB,CAAC,CAAC,EAAE;MAC3B,IAAI,CAACO,gBAAgB,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAC7D;IACJ;;IAEA;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,IAAI,CAAC9D,IAAI,CAAC;IACxC,MAAM+D,IAAI,GAAGC,MAAM,CAACC,WAAW,CAACJ,QAAQ,CAAC;;IAEzC;IACA,OAAOE,IAAI,CAACG,gBAAgB;IAE5B,IAAI;MACA,IAAI,CAACZ,UAAU,CAAC,IAAI,CAAC;;MAErB;MACA,MAAM,IAAI,CAACa,kBAAkB,CAACJ,IAAI,CAAC;MAEnC,IAAI,CAACH,gBAAgB,CAAC,0BAA0B,EAAE,SAAS,CAAC;;MAE5D;MACAQ,UAAU,CAAC,MAAM;QACb;QACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3C;MACJ,CAAC,EAAE,IAAI,CAAC;IAEZ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,IAAI,CAACX,gBAAgB,CAAC,wCAAwC,EAAE,OAAO,CAAC;IAC5E,CAAC,SAAS;MACN,IAAI,CAACN,UAAU,CAAC,KAAK,CAAC;IAC1B;EACJ;EAEA,MAAMa,kBAAkBA,CAACJ,IAAI,EAAE;IAC3B;IACA,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpCN,UAAU,CAAC,MAAM;QACbC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEP,IAAI,CAAC;;QAEvC;QACA,IAAIY,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;UACrBH,OAAO,CAAC;YAAEI,OAAO,EAAE,IAAI;YAAEhC,OAAO,EAAE;UAA0B,CAAC,CAAC;QAClE,CAAC,MAAM;UACH6B,MAAM,CAAC,IAAII,KAAK,CAAC,qBAAqB,CAAC,CAAC;QAC5C;MACJ,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC;EACN;EAEAlB,gBAAgBA,CAACf,OAAO,EAAEkC,IAAI,GAAG,MAAM,EAAE;IACrC;IACA,MAAMC,qBAAqB,GAAG/E,QAAQ,CAACc,gBAAgB,CAAC,eAAe,CAAC;IACxEiE,qBAAqB,CAAChE,OAAO,CAACiE,YAAY,IAAIA,YAAY,CAAC9B,MAAM,CAAC,CAAC,CAAC;;IAEpE;IACA,MAAM8B,YAAY,GAAGhF,QAAQ,CAACiF,aAAa,CAAC,KAAK,CAAC;IAClDD,YAAY,CAACE,SAAS,GAAG,gBAAgBJ,IAAI,EAAE;IAC/CE,YAAY,CAACjC,WAAW,GAAGH,OAAO;;IAElC;IACAoC,YAAY,CAACxB,KAAK,CAAC2B,OAAO,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IAED,IAAIL,IAAI,KAAK,SAAS,EAAE;MACpBE,YAAY,CAACxB,KAAK,CAAC4B,eAAe,GAAG,SAAS;IAClD,CAAC,MAAM,IAAIN,IAAI,KAAK,OAAO,EAAE;MACzBE,YAAY,CAACxB,KAAK,CAAC4B,eAAe,GAAG,SAAS;IAClD,CAAC,MAAM;MACHJ,YAAY,CAACxB,KAAK,CAAC4B,eAAe,GAAG,SAAS;IAClD;IAEApF,QAAQ,CAACqF,IAAI,CAACC,WAAW,CAACN,YAAY,CAAC;;IAEvC;IACAb,UAAU,CAAC,MAAM;MACba,YAAY,CAACxB,KAAK,CAAC+B,SAAS,GAAG,iCAAiC;MAChEpB,UAAU,CAAC,MAAMa,YAAY,CAAC9B,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;IAChD,CAAC,EAAE,IAAI,CAAC;EACZ;EAEAvC,eAAeA,CAAA,EAAG;IACd,IAAIC,MAAM,CAAC4E,UAAU,IAAI,GAAG,EAAE;MAC1BxF,QAAQ,CAACc,gBAAgB,CAAC,eAAe,CAAC,CAACC,OAAO,CAAC0E,KAAK,IAAI;QACxDA,KAAK,CAACjC,KAAK,CAACkC,QAAQ,GAAG,MAAM,CAAC,CAAC;MACnC,CAAC,CAAC;IACN;EACJ;AACJ;;AAEA;AACA,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC7B,MAAM5E,KAAK,GAAGhB,QAAQ,CAACC,cAAc,CAAC2F,OAAO,CAAC;EAC9C,MAAMC,MAAM,GAAG7E,KAAK,CAAC8E,kBAAkB;EAEvC,IAAI9E,KAAK,CAAC8D,IAAI,KAAK,UAAU,EAAE;IAC3B9D,KAAK,CAAC8D,IAAI,GAAG,MAAM;IACnBe,MAAM,CAAC9C,WAAW,GAAG,IAAI;EAC7B,CAAC,MAAM;IACH/B,KAAK,CAAC8D,IAAI,GAAG,UAAU;IACvBe,MAAM,CAAC9C,WAAW,GAAG,IAAI;EAC7B;AACJ;;AAEA;AACA,SAASgD,MAAMA,CAAA,EAAG;EACd,IAAInF,MAAM,CAACoF,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IAC3BrF,MAAM,CAACoF,OAAO,CAACE,IAAI,CAAC,CAAC;EACzB,CAAC,MAAM;IACH;IACAtF,MAAM,CAACuF,QAAQ,CAACC,IAAI,GAAG,GAAG,CAAC,CAAC;EAChC;AACJ;;AAEA;AACA,MAAM5C,KAAK,GAAGxD,QAAQ,CAACiF,aAAa,CAAC,OAAO,CAAC;AAC7CzB,KAAK,CAACT,WAAW,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD/C,QAAQ,CAACqG,IAAI,CAACf,WAAW,CAAC9B,KAAK,CAAC;;AAEhC;AACAxD,QAAQ,CAACO,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAChD,IAAIV,YAAY,CAAC,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA,IAAI,OAAOyG,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,OAAO,EAAE;EACjDD,MAAM,CAACC,OAAO,GAAG1G,YAAY;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}